name: test

on:
  pull_request:
    branches: 'master'
  push:
    branches: 'master'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      -
        # https://github.com/actions/checkout
        name: Checkout
        uses: actions/checkout@v1
      -
        name: Prepare
        id: prepare
        run: |
          echo ::set-output name=build_tag::test
          echo ::set-output name=container_name::ftpgrab
          echo ::set-output name=running_timeout::120
          echo ::set-output name=running_log_check::Finished
      -
        name: Docker Build
        run: |
          docker build --tag ${{ steps.prepare.outputs.build_tag }} --file Dockerfile .
      -
        name: Start Pure-FTPd container
        run: |
          ls -al ${HOME}
          docker run -d --name pureftpd --hostname pureftpd \
            -e "FTP_USER_NAME=foo" \
            -e "FTP_USER_PASS=bar" \
            -e "FTP_USER_HOME=/home/foo" \
            -e "PUBLICHOST=pureftpd" \
            -v "${HOME}:/home/foo:ro" \
            stilliard/pure-ftpd:hardened
      -
        name: Start container
        run: |
          docker run -d --link pureftpd --name ${{ steps.prepare.outputs.container_name }} \
            -e "LOG_LEVEL=debug" \
            -e "LOG_NOCOLOR=true" \
            -v "$(pwd)/.res/ftpgrab.test.yml:/ftpgrab.yml:ro" \
            ${{ steps.prepare.outputs.build_tag }}
      -
        name: Test run
        run: |
          TIMEOUT=$((SECONDS + ${{ steps.prepare.outputs.running_timeout }}))
          while read LOGLINE; do
            echo ${LOGLINE}
            if [[ ${LOGLINE} == *"${{ steps.prepare.outputs.running_log_check }}"* ]]; then
              echo "🎉 Container up!"
              break
            fi
            if [[ $SECONDS -gt ${TIMEOUT} ]]; then
              >&2 echo "❌ Failed to run ${{ steps.prepare.outputs.container_name }} container"
              docker rm -f ${{ steps.prepare.outputs.container_name }} > /dev/null 2>&1 || true
              exit 1
            fi
          done < <(docker logs -f ${{ steps.prepare.outputs.container_name }} 2>&1)

          CONTAINER_STATUS=$(docker container inspect --format "{{.State.Status}}" ${{ steps.prepare.outputs.container_name }})
          if [[ ${CONTAINER_STATUS} != "running" ]]; then
            >&2 echo "❌ Container ${{ steps.prepare.outputs.container_name }} returned status '$CONTAINER_STATUS'"
            docker rm -f ${{ steps.prepare.outputs.container_name }} > /dev/null 2>&1 || true
            exit 1
          fi
          docker rm -f ${{ steps.prepare.outputs.container_name }} > /dev/null 2>&1 || true
